" This file represents the minimal .vimrc needed to work with govim.
"
" We also include a number of suggested settings that we think the majority of
" users will like/prefer.

set nocompatible
filetype off

set nobackup
set nowritebackup
set noswapfile


set rtp+=$HOME/.vim/bundle/Vundle.vim/
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" general vim improvements
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-vinegar'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-characterize'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-afterimage'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-eunuch'
Plugin 'sjl/gundo.vim'

" powerline
Plugin 'powerline/powerline'

" yaml
Plugin 'ingydotnet/yaml-vim'

" DB
Plugin 'tpope/vim-dadbod'
Plugin 'kristijanhusak/vim-dadbod-ui'

" Languages
Plugin 'jaxbot/semantic-highlight.vim'

" Markdown
Plugin 'preservim/vim-markdown'

"" live lint hint
"Plugin 'dense-analysis/ale'

"" LSP
" Plugin 'prabirshrestha/vim-lsp'
" Plugin 'mattn/vim-lsp-settings'

"" DAP: debug adapter protocol
" Plugin 'puremourning/vimspector'

"" Go
Plugin 'govim/govim'
"" TinyGo
Plugin 'sago35/tinygo.vim'
" vim-go, just for syntax
"Plugin 'fatih/vim-go'


"" Markdown
Plugin 'godlygeek/tabular'
Plugin 'preservim/vim-markdown'


"" Java
"Plugin 'artur-shaik/vim-javacomplete2'

"" JSON
Plugin 'tpope/vim-jdaddy'

"" CUE
Plugin 'jjo/vim-cue'

"" GraphQL
Plugin 'jparise/vim-graphql'

"" PlantUML
Plugin 'aklt/plantuml-syntax'

" Git
Plugin 'tpope/vim-fugitive'
Plugin 'gregsexton/gitv'
Plugin 'nicwest/vim-git-appraise'
Plugin 'airblade/vim-gitgutter'
Plugin 'whiteinge/diffconflicts'

" colorscheme/themes
Plugin 'altercation/vim-colors-solarized'
"Plugin 'lifepillar/vim-solarized8'

" Web
Plugin 'yosssi/vim-gcss'
Plugin 'yosssi/vim-ace'

" productivity
Plugin 'wakatime/vim-wakatime'

" inputs
Plugin 'junegunn/vim-emoji'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'

" Hex edition
Plugin 'fidian/hexmode'

" 3D
"" GLSL
Plugin 'tikhomirov/vim-glsl'

call vundle#end()
filetype plugin indent on

set splitright " split vertical on the right
set encoding=UTF-8
set fileformats=unix,dos,mac
set incsearch
set ttyfast
set lazyredraw

" speed up syntax highlighting
set nocursorcolumn
set nocursorline

" do not hide markdown
set conceallevel=0


" Make Vim to handle long lines nicely.
set wrap
set textwidth=80
set formatoptions=qrn1

" start govim default
set mouse=a

" To get hover working in the terminal we need to set ttymouse. See
"
" :help ttymouse
"
" for the appropriate setting for your terminal. Note that despite the
" automated tests using xterm as the terminal, a setting of ttymouse=xterm
" does not work correctly beyond a certain column number (citation needed)
" hence we use ttymouse=sgr
set ttymouse=sgr

" Suggestion: By default, govim populates the quickfix window with diagnostics
" reported by gopls after a period of inactivity, the time period being
" defined by updatetime (help updatetime). Here we suggest a short updatetime
" time in order that govim/Vim are more responsive/IDE-like
set updatetime=500

" Suggestion: To make govim/Vim more responsive/IDE-like, we suggest a short
" balloondelay
set balloondelay=250

" Suggestion: Turn on the sign column so you can see error marks on lines
" where there are quickfix errors. Some users who already show line number
" might prefer to instead have the signs shown in the number column; in which
" case set signcolumn=number
set signcolumn=yes

" Suggestion: Turn on syntax highlighting for .go files. You might prefer to
" turn on syntax highlighting for all files, in which case
"
" syntax on
"
" will suffice, no autocmd required.
"autocmd! BufEnter,BufNewFile *.go syntax on
"autocmd! BufLeave *.go syntax off
syntax on

" Suggestion: turn on auto-indenting. If you want closing parentheses, braces
" etc to be added, https://github.com/jiangmiao/auto-pairs. In future we might
" include this by default in govim.
set autoindent
set smartindent
filetype indent off

" Suggestion: define sensible backspace behaviour. See :help backspace for
" more details
set backspace=2

" Suggestion: show info for completion candidates in a popup menu
if has("patch-8.1.1904")
  set completeopt+=popup
  set completepopup=align:menu,border:off,highlight:Pmenu
endif

" end govim default

" personal govim

"call govim#config#Set("GoImportsLocalPrefix","private.git.instance.com")

"call govim#config#Set("ExperimentalSemanticTokens", 1)
"call govim#config#Set("ExperimentalProgressPopups", 1)

" deactivate gofumpt while working on WS to avoid style conflicts
"call govim#config#Set("Gofumpt", 1)

" for consensys quorumkeyserver
"call govim#config#Set("GoplsEnv",{"GOFLAGS": "-tags=acceptance,e2e"})

" for tinygo bluepill dev
" call govim#config#Set("GoplsEnv", { "GOOS": "linux", "GOARCH": "arm", "GOARM": "6", "GOFLAGS": "-tags=cortexm,baremetal,linux,arm,bluepill,stm32f103,stm32f1,stm32,tinygo,math_big_pure_go,gc.conservative,scheduler.tasks,serial.uart", "GOROOT": "/home/dolanor/.cache/tinygo/goroot-132e72cbff8a381c67632e835c743a6e28765d7e2cc6bb1d92e6be30d73a5ee6"})

" Markdown
let g:vim_markdown_folding_disabled = 1
let g:markdown_folding = 1

autocmd FileType slide setlocal syntax=markdown
autocmd FileType md setlocal syntax=markdown

"call govim#config#Set("ExperimentalAllowModfileModifications", 0)

" general vim
"


" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone

set complete-=i
set showmatch
set smarttab

set tabstop=8
set shiftwidth=8
set expandtab

set nrformats-=octal
set shiftround

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif


" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %



au BufNewFile,BufRead *.vim setlocal noet ts=8 sw=8 sts=8
au BufNewFile,BufRead *.txt setlocal noet ts=8 sw=8
au BufNewFile,BufRead *.md setlocal spell noet ts=8 sw=8
au BufNewFile,BufRead *.yml,*.yaml setlocal expandtab ts=2 sw=2
au BufNewFile,BufRead *.cpp setlocal expandtab ts=2 sw=2
au BufNewFile,BufRead *.hpp setlocal expandtab ts=2 sw=2
au BufNewFile,BufRead *.json setlocal expandtab ts=2 sw=2

" Go settings
"au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4

" Dockerfile settings
autocmd FileType dockerfile set noexpandtab

" shell/config/systemd settings
autocmd FileType fstab,systemd set noexpandtab
autocmd FileType gitconfig,sh,toml set noexpandtab

" spell check for git commits
autocmd FileType gitcommit setlocal spell

"" netrw
""" tree
let g:netrw_liststyle=0
""" open the vertical window with 80%
let g:netrw_winsize=80

"" make the cursor not go till the end
set scrolloff=5

" java config
autocmd FileType java setlocal omnifunc=javacomplete#Complete
autocmd FileType java JCEnable

" nice git review with vertical split
set diffopt+=vertical

" solarized
let g:solarized_termcolors=16
set background=dark
colorscheme solarized
"set t_Co=256
set t_Co=16
set t_Cs="Fix bad spell issue in solarized theme"

" make :terminal work with solarized theme in gnome-terminal with solarized
" activated
set t_Co=16

" gutter
set number

" save options
"" don't ask to save buffer when switching with another one
set hidden
"" save shortcuts
nnoremap <C-S>      :<C-U>update<CR>
vnoremap <C-S>      :<C-U>update<CR>gv
inoremap <C-S>      <C-O>:update<CR><Esc>

" command completion
set wildmenu
set wildmode=list:full

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=migrations                       " Django migrations
set wildignore+=go/pkg                           " Go static files
set wildignore+=go/bin                           " Go bin files
set wildignore+=go/bin-vagrant                   " Go bin-vagrant files
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig

" search options
"" ignore case in search
set ignorecase
"" don't ignore case when you type search with some uppercase char
set smartcase
"" highlight search
set hls

" Highlights
"" use :autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
" before colorscheme maybe ?
highlight ExtraWhitespace ctermbg=red guibg=red

" Show trailing whitespace:
match ExtraWhitespace /\s\+$/
" Show trailing whitespace and spaces before a tab:
match ExtraWhitespace /\s\+$\| \+\ze\t/
" Show NBSP
match ExtraWhitespace /Â /

" add GOPATH/src for file find
set path+=~/go/src


" mappings

"" tagbar
map ,b :TagbarToggle<CR>

"" diff
noremap ,d :Gdiff<CR>

"" Go
au BufRead,BufNewFile *.gotpl set filetype=gohtmltmpl

" put go template directives in a toned down color
highlight GoTemplate guifg=red guibg=green ctermfg=darkgrey ctermbg=yellow
syntax match GoTemplate /{{.*}}/

" GovimFZFSymbol is a user-defined function that can be called to start fzf in
" a mode whereby it uses govim's new child-parent capabilities to query the
" parent govim instance for gopls Symbol method results that then are used to
" drive fzf.
function GovimFZFSymbol(queryAddition)
  let l:expect_keys = join(keys(s:symbolActions), ',')
  let l:source = join(GOVIMParentCommand(), " ").' gopls Symbol -quickfix'
  let l:reload = l:source." {q}"
  call fzf#run(fzf#wrap({
        \ 'source': l:source,
        \ 'sink*': function('s:handleSymbol'),
        \ 'options': [
        \       '--with-nth', '2..',
        \       '--expect='.l:expect_keys,
        \       '--phony',
        \       '--bind', 'change:reload:'.l:reload
        \ ]}))
endfunction

" Map \s to start a symbol search
"
" Once you have found the symbol you want:
"
" * Enter will open that result in the current window
" * Ctrl-s will open that result in a split
" * Ctrl-v will open that result in a vertical split
" * Ctrl-t will open that result in a new tab
"

noremap ,R :GOVIMRename<CR>
noremap ,c :GOVIMReferences<CR>
noremap K : <C-u>call GOVIMHover()<CR>
"noremap K :GOVIM<CR>
nmap ,s :call GovimFZFSymbol('')<CR>

" noremap ,R :LspRename<CR>
" noremap ,c :LspReferences<CR>
" noremap K  :LspHover<CR>


" s:symbolActions are the actions that, in addition to plain <Enter>,
" we want to be able to fire from fzf. Here we map them to the corresponding
" command in VimScript.
let s:symbolActions = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit',
  \ }

" With thanks and reference to github.com/junegunn/fzf.vim/issues/948 which
" inspired the following
function! s:handleSymbol(sym) abort
  " a:sym is a [2]string array where the first element is the
  " key pressed (or empty if simply Enter), and the second element
  " is the entry selected in fzf, i.e. the match.
  "
  " The match will be of the form:
  "
  "   $filename:$line:$col: $match
  "
  if len(a:sym) == 0
    return
  endif
  let l:cmd = get(s:symbolActions, a:sym[0], "")
  let l:match = a:sym[1]
  let l:parts = split(l:match, ":")
  execute 'silent' l:cmd
  execute 'buffer' bufnr(l:parts[0], 1)
  set buflisted
  call cursor(l:parts[1], l:parts[2])
  normal! zz
endfunction



"" reviews
noremap ,D :Gdiff origin/main<CR>
" keep the current buffer and close the diff view, switch it to the next
" buffer and reopen the diff with origin/master
noremap ,N :wincmd o<CR>:bnext<CR>:Gdiff origin/main<CR>:wincmd w<CR>
noremap ,P :wincmd o<CR>:bprev<CR>:Gdiff origin/main<CR>:wincmd w<CR>
" toggle line wrapping on all windows of the current tab
noremap ,w :windo set wrap!<CR>
" fold if err != nil
noremap ,z :g/^[[:space:]]*if err /normal zc<CR>
" close the tab
noremap ,t :tabclose<CR>

"" markdown

" add a clipboard as a markdown link
" needs tpope/vim-surround 
xmap ,u <Plug>VSurround]%a()<Esc>"+P

noremap ,T :let netrw_liststyle=3<CR>:vsplit<CR>:e .<CR>

let g:pt_command = '
  \ pt --nogroup --column  --ignore-case  --hidden --follow --color
  \ -G=".*\.(js|json|php|md|styl|jade|html|config|py|cpp|c|go|hs|rb|conf)" '

command! -bang -nargs=* F call fzf#vim#grep(g:pt_command .shellescape(<q-args>), 1, <bang>0)

" CUE
"" syntax

autocmd BufEnter,BufNewFile,BufRead *.cue setf cue
autocmd FileType cue setlocal syntax=cue


autocmd! BufEnter,BufNewFile *.cue syntax on
"autocmd! BufLeave *.cue syntax off


" CUE LSP
if executable('dagger')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'dagger_cue_lsp',
        \ 'cmd': {server_info->['dagger', 'cuelsp']},
        \ 'allowlist': ['cue'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    "nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> ,rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.cue call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

let g:lsp_log_file = expand('/tmp/vim-lsp.log')
let g:lsp_log_verbose = 1

let g:lsp_experimental_workspace_folders = get(g:, 'lsp_experimental_workspace_folders', 1)

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" shortcuts for background
nmap <F6> :set bg=light<CR>
nmap <F5> :set bg=dark<CR>

let g:vimspector_enable_mappings = 'HUMAN'
nmap ,vl :call vimspector#Launch()<CR>
nmap ,vr :VimspectorReset<CR>
nmap ,ve :VimspectorEval
nmap ,vw :VimspectorWatch
nmap ,vo :VimspectorShowOutput
nmap ,vi <Plug>VimspectorBalloonEval
xmap ,vi <Plug>VimspectorBalloonEval

" for normal mode - the word under the cursor
nmap ,di <Plug>VimspectorBalloonEval
" for visual mode, the visually selected text
xmap ,di <Plug>VimspectorBalloonEval

let g:vimspector_install_gadgets = [ 'debugpy', 'vscode-go', 'CodeLLDB', 'vscode-node-debug2' ]

" FZF shortcuts
nmap ,fb :Buffers<CR>
nmap ,ff :Files<CR>
"
" modeline for specific file configuration
set modeline
set modelineexpr
set modelines=4


" spell check
" ignore duration, eg. 10h46m
syntax match duration /[0-9]*h?[0-9]*m?/ contains=@NoSpell

" journaling / logging in the obsidian style
command! Log execute 'edit ~/cloud/notes/journal/' . strftime('%Y-%m-%d') . '.md'


" Command: StartWork (alias SW)
command! StartWork call StartWorkEntry()
command! SW StartWork

function! StartWorkEntry()
    let l:time = strftime('%H:%M')
    call append(line('.'), '- ' . l:time . ' - : ')
    normal! j02f:la
    normal! A
endfunction

" Command: StopWork (alias STW)
command! StopWork call StopWorkEntry()
command! STW StopWork

function! StopWorkEntry()
    let l:time = strftime('%H:%M')
    let l:line = getline('.')
    let l:colon_pos = match(l:line, ':', match(l:line, ':') + 1)
    if l:colon_pos > 0
        let l:newline = strpart(l:line, 0, l:colon_pos) . l:time . strpart(l:line, l:colon_pos)
        call setline('.', l:newline)
    else
        echo "No second colon found on this line."
    endif
endfunction

command! -nargs=1 Note execute "edit" '~/cloud/notes/' . '<args>' . '.md'
